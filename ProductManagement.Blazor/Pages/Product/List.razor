@page "/products"
@inject HttpClient Http
@inject ProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Products</PageTitle>

<h3 class="d-flex justify-content-between align-items-center">
    Product List
    <a class="btn btn-primary" href="/product/create">+ Add Product</a>
</h3>

@if (isLoading)
{
    <p><em>Loading products...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (products != null && products.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th class="nowrap">Name</th>
                <th class="nowrap mx-des-wd">Description</th>
                <th class="nowrap">Stock Quantity</th>
                <th class="nowrap">Price</th>
                <th class="nowrap">Created At</th>
                <th class="nowrap">Updated At</th>
                <th class="nowrap">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.StockQuantity</td>
                    <td>@product.Price</td>
                    <td>@product.CreatedAt</td>
                    <td>@product.UpdatedAt</td>
                    <td>
                        <!-- Edit Button (Navigates to the Edit Page) -->
                        <a class="btn btn-sm btn-warning" href="/product/edit/@product.Id">
                            <i class="bi bi-pencil"></i> Edit
                        </a>

                        <!-- Delete Button (Triggers Delete Action) -->
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No products found.</p>
}

@code {
    private List<Product>? products;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load products. Please try again later.";
            Console.Error.WriteLine(ex.Message); // Optional: log it
        }
        finally
        {
            isLoading = false;
        }
    }

    // Delete product
    private async Task DeleteProduct(int productId)
    {
        var confirmation = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (confirmation)
        {
            try
            {
                await ProductService.DeleteProductAsync(productId);
                products = products?.Where(p => p.Id != productId).ToList(); // Remove deleted product from the list
                StateHasChanged(); // Re-render the component
            }
            catch (Exception ex)
            {
                errorMessage = "Failed to delete product. Please try again later.";
                Console.Error.WriteLine(ex.Message); // Optional: log it
            }
        }
    }
}
